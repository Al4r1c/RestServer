==CHANGELOG==

[12/03/13]
Création objet de réponse + tests.
Passage en trois phases: requête, traitement, réponse.
Réorganisation des packages.

[07/03/13]
Apports et corrections au mock générique:
	-Possibilités de plusieurs arguments pour with.
	-Possibilité de lancer des exceptions.
	-Le scope de FactoryMock était corrompue.
ClassLoaderTest.
MainApplicationTest.
ErreurHandlerTest + ErrorManagerTest.
Exclusion de classes définie intestables:
	-Conteneur : injection de dépendance
	-ErrorHandler::setHandlers : contient des fonctions intestables (set_error_handler, set_exception_handler).
Coverage actuel: 99%

[06/03/13]
LoggingFactoryTest + LoggerTest
FactoryMock

[05/03/13]
Build sous Phing avec différents outils d'analyses.

[01/03/13]
Uniformisation des restrictions, egalement plus strict, sur les types + tests associés.
PHPDoc.

[01/03/2013]
Error logging: Passage en observeur. Fonctionnement complètement détaché de l'application.
Uniformisation du système d'erreurs.
Suppression du typage par exceptions, utilisation du code pour identifier le type.

[28/02/2013]
Nouvelle branche GitHub "dev". Le developpement sera push dans cette branche, les versions finales en master.
Corrections de divers bug.
Ajout des tests:
	-TradManager, I18nManager

[26/02/2013]
Passage en realpath pour l'acheminement.
Création de la classe FileSystem.
Appel de nouveaux fichiers grâce à la classe statique FileManager.
Nouvelle classe XMLParser à la place de DOMDocument.
Ajout des tests:
	-MainApplication
	-RestRequete, RestReponse, RestManager, HeaderManager, Server, Renderers
	-Config
	-Fichier, FileSystem (utilisation de vfsStream), Chargement de fichiers (Php, Xml & Yaml).
	-TypeDetector

[14/02/2013]
.htaccess fonctionnel.
ClassLoader acceptant plusieurs namespace.
Utilisation d'un composer.
Conteneur Pimple pour l'initialisation et l'injection de dépendance.
Base d'un serveur Rest mis en place (renvoie la requête).
Requête et réponse fonctionnel.
Configuration (utilise le format YAML, exploité grâce à SPYC) fonctionnelle. Définie notamment la langue (pour les erreurs) et les formats de rendus.
Internationalisation fonctionnelle.
Système d'exceptions déployé, associé à un code erreur pour la traduction. En cas d'exception levée, réponse renvoie code status erreur HTTP + signification.
Aucun tests.